{
  "compiler": {
    "version": "0.8.6+commit.11564f7e"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "name": "INSUFFICIENT_AMOUNT",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "INSUFFICIENT_RESERVES",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "INVALID_PRICE_SORT_ORDER",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "INVALID_TIER",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "NO_QUANTITY",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "OUT",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "RESERVED_RATE_NOT_ALLOWED",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "TIER_LOCKED",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "TIER_REMOVED",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "VOTING_UNITS_NOT_ALLOWED",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "nft",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "caller",
            "type": "address"
          }
        ],
        "name": "CleanTiers",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          }
        ],
        "name": "ForTest_dumpTiersList",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "id",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "contributionFloor",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "lockedUntil",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "remainingQuantity",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "initialQuantity",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "votingUnits",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "reservedRate",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "reservedTokenBeneficiary",
                "type": "address"
              },
              {
                "internalType": "bytes32",
                "name": "encodedIPFSUri",
                "type": "bytes32"
              }
            ],
            "internalType": "struct JB721Tier[]",
            "name": "_tiers",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_delegate",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "holder",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tier",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "balance",
            "type": "uint256"
          }
        ],
        "name": "ForTest_setBalanceOf",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_delegate",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "_owner",
            "type": "address"
          }
        ],
        "name": "ForTest_setFirstOwnerOf",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_delegate",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "ForTest_setIsTierRemoved",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_delegate",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tier",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "ForTest_setReservesMintedFor",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_delegate",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "index",
            "type": "uint256"
          },
          {
            "components": [
              {
                "internalType": "uint80",
                "name": "contributionFloor",
                "type": "uint80"
              },
              {
                "internalType": "uint48",
                "name": "lockedUntil",
                "type": "uint48"
              },
              {
                "internalType": "uint48",
                "name": "remainingQuantity",
                "type": "uint48"
              },
              {
                "internalType": "uint48",
                "name": "initialQuantity",
                "type": "uint48"
              },
              {
                "internalType": "uint16",
                "name": "votingUnits",
                "type": "uint16"
              },
              {
                "internalType": "uint16",
                "name": "reservedRate",
                "type": "uint16"
              }
            ],
            "internalType": "struct JBStored721Tier",
            "name": "newTier",
            "type": "tuple"
          }
        ],
        "name": "ForTest_setTier",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_owner",
            "type": "address"
          }
        ],
        "name": "balanceOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "balance",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "baseUriOf",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          }
        ],
        "name": "cleanTiers",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "contractUriOf",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "defaultReservedTokenBeneficiaryOf",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "encodedIPFSUriOf",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "encodedTierIPFSUriOf",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "firstOwnerOf",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "isTierRemoved",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "lockReservedTokenChangesFor",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "lockVotingUnitChangesFor",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "maxTierId",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_tierId",
            "type": "uint256"
          }
        ],
        "name": "numberOfReservedTokensOutstandingFor",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "numberOfReservesMintedFor",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "contributionFloor",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "lockedUntil",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "initialQuantity",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "votingUnits",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "reservedRate",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "reservedTokenBeneficiary",
                "type": "address"
              },
              {
                "internalType": "bytes32",
                "name": "encodedIPFSUri",
                "type": "bytes32"
              },
              {
                "internalType": "bool",
                "name": "shouldUseBeneficiaryAsDefault",
                "type": "bool"
              }
            ],
            "internalType": "struct JB721TierParams[]",
            "name": "_tiersToAdd",
            "type": "tuple[]"
          }
        ],
        "name": "recordAddTiers",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "tierIds",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bool",
            "name": "_flag",
            "type": "bool"
          }
        ],
        "name": "recordLockReservedTokenChanges",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bool",
            "name": "_flag",
            "type": "bool"
          }
        ],
        "name": "recordLockVotingUnitChanges",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_amount",
            "type": "uint256"
          },
          {
            "internalType": "uint16[]",
            "name": "_tierIds",
            "type": "uint16[]"
          }
        ],
        "name": "recordMint",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "tokenIds",
            "type": "uint256[]"
          },
          {
            "internalType": "uint256",
            "name": "leftoverAmount",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_amount",
            "type": "uint256"
          }
        ],
        "name": "recordMintBestAvailableTier",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "tierId",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "leftoverAmount",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_tierId",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_count",
            "type": "uint256"
          }
        ],
        "name": "recordMintReservesFor",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "tokenIds",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256[]",
            "name": "_tierIds",
            "type": "uint256[]"
          }
        ],
        "name": "recordRemoveTierIds",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_uri",
            "type": "string"
          }
        ],
        "name": "recordSetBaseUri",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_uri",
            "type": "string"
          }
        ],
        "name": "recordSetContractUri",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_beneficiary",
            "type": "address"
          }
        ],
        "name": "recordSetDefaultReservedTokenBeneficiary",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "_owner",
            "type": "address"
          }
        ],
        "name": "recordSetFirstOwnerOf",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "contract IJBTokenUriResolver",
            "name": "_resolver",
            "type": "address"
          }
        ],
        "name": "recordSetTokenUriResolver",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_tierId",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "_from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_to",
            "type": "address"
          }
        ],
        "name": "recordTransferForTier",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          },
          {
            "internalType": "uint256[]",
            "name": "_tokenIds",
            "type": "uint256[]"
          }
        ],
        "name": "redemptionWeightOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "weight",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_tierId",
            "type": "uint256"
          }
        ],
        "name": "reservedTokenBeneficiaryOf",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_id",
            "type": "uint256"
          }
        ],
        "name": "tier",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "id",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "contributionFloor",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "lockedUntil",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "remainingQuantity",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "initialQuantity",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "votingUnits",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "reservedRate",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "reservedTokenBeneficiary",
                "type": "address"
              },
              {
                "internalType": "bytes32",
                "name": "encodedIPFSUri",
                "type": "bytes32"
              }
            ],
            "internalType": "struct JB721Tier",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "tierBalanceOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "tierIdOfToken",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "pure",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "tierOfTokenId",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "id",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "contributionFloor",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "lockedUntil",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "remainingQuantity",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "initialQuantity",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "votingUnits",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "reservedRate",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "reservedTokenBeneficiary",
                "type": "address"
              },
              {
                "internalType": "bytes32",
                "name": "encodedIPFSUri",
                "type": "bytes32"
              }
            ],
            "internalType": "struct JB721Tier",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_account",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_tierId",
            "type": "uint256"
          }
        ],
        "name": "tierVotingUnitsOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "_startingId",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_size",
            "type": "uint256"
          }
        ],
        "name": "tiers",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "id",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "contributionFloor",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "lockedUntil",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "remainingQuantity",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "initialQuantity",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "votingUnits",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "reservedRate",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "reservedTokenBeneficiary",
                "type": "address"
              },
              {
                "internalType": "bytes32",
                "name": "encodedIPFSUri",
                "type": "bytes32"
              }
            ],
            "internalType": "struct JB721Tier[]",
            "name": "_tiers",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "tokenUriResolverOf",
        "outputs": [
          {
            "internalType": "contract IJBTokenUriResolver",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          }
        ],
        "name": "totalRedemptionWeight",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "weight",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          }
        ],
        "name": "totalSupply",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "supply",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_nft",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_account",
            "type": "address"
          }
        ],
        "name": "votingUnitsOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "units",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "balanceOf(address,address)": {
          "params": {
            "_nft": "The NFT to get a balance from.",
            "_owner": "The address to check the balance of."
          },
          "returns": {
            "balance": "The number of tokens owners by the owner accross all tiers."
          }
        },
        "cleanTiers(address)": {
          "params": {
            "_nft": "The NFT contract to clean tiers for."
          }
        },
        "encodedTierIPFSUriOf(address,uint256)": {
          "params": {
            "_nft": "The NFT contract to which the encoded IPFS URI belongs.",
            "_tokenId": "the ID of the token."
          },
          "returns": {
            "_0": "The encoded IPFS URI."
          }
        },
        "numberOfReservedTokensOutstandingFor(address,uint256)": {
          "params": {
            "_nft": "The NFT to get a number of reserved tokens outstanding.",
            "_tierId": "The ID of the tier to get a number of reserved tokens outstanding."
          },
          "returns": {
            "_0": "The outstanding number of reserved tokens within the tier."
          }
        },
        "recordAddTiers((uint256,uint256,uint256,uint256,uint256,address,bytes32,bool)[])": {
          "params": {
            "_tiersToAdd": "The tiers to add."
          },
          "returns": {
            "tierIds": "The IDs of the tiers added."
          }
        },
        "recordLockReservedTokenChanges(bool)": {
          "params": {
            "_flag": "The flag to set."
          }
        },
        "recordLockVotingUnitChanges(bool)": {
          "params": {
            "_flag": "The flag to set."
          }
        },
        "recordMint(uint256,uint16[])": {
          "params": {
            "_amount": "The amount to base the mints on. All mints' price floors must fit in this amount.",
            "_tierIds": "The IDs of the tier to mint from."
          },
          "returns": {
            "leftoverAmount": "The amount leftover after the mint.",
            "tokenIds": "The IDs of the tokens minted."
          }
        },
        "recordMintBestAvailableTier(uint256)": {
          "params": {
            "_amount": "The amount to base the mint on."
          },
          "returns": {
            "leftoverAmount": "The amount leftover after the mint. ",
            "tierId": "The ID of the tier minted from.",
            "tokenId": "The token ID minted."
          }
        },
        "recordMintReservesFor(uint256,uint256)": {
          "details": "Only a project owner can mint tokens.",
          "params": {
            "_count": "The number of reserved tokens to mint. ",
            "_tierId": "The ID of the tier to mint within."
          },
          "returns": {
            "tokenIds": "The IDs of the tokens being minted as reserves."
          }
        },
        "recordRemoveTierIds(uint256[])": {
          "params": {
            "_tierIds": "The tiers IDs to remove."
          }
        },
        "recordSetBaseUri(string)": {
          "params": {
            "_uri": "The base URI to set."
          }
        },
        "recordSetContractUri(string)": {
          "params": {
            "_uri": "The contract URI to set."
          }
        },
        "recordSetDefaultReservedTokenBeneficiary(address)": {
          "params": {
            "_beneficiary": "The reservd token beneficiary."
          }
        },
        "recordSetFirstOwnerOf(uint256,address)": {
          "params": {
            "_owner": "The owner to set as the first owner.",
            "_tokenId": "The ID of the token having the first owner set."
          }
        },
        "recordSetTokenUriResolver(address)": {
          "params": {
            "_resolver": "The resolver to set."
          }
        },
        "recordTransferForTier(uint256,address,address)": {
          "params": {
            "_from": "The sender of the token.",
            "_tierId": "The ID the tier being transfered",
            "_to": "The recipient of the token."
          }
        },
        "redemptionWeightOf(address,uint256[])": {
          "params": {
            "_nft": "The NFT for which the redemption weight is being calculated.",
            "_tokenIds": "The IDs of the tokens to get the cumulative redemption weight of."
          },
          "returns": {
            "weight": "The weight."
          }
        },
        "reservedTokenBeneficiaryOf(address,uint256)": {
          "params": {
            "_nft": "The NFT to get the reserved token beneficiary within.",
            "_tierId": "The ID of the tier to get a reserved token beneficiary of."
          },
          "returns": {
            "_0": "The reserved token benficiary."
          }
        },
        "tier(address,uint256)": {
          "params": {
            "_id": "The ID of the tier to get. ",
            "_nft": "The NFT to get a tier within."
          },
          "returns": {
            "_0": "The tier."
          }
        },
        "tierIdOfToken(uint256)": {
          "details": "Tier's are 1 indexed from the `tiers` array, meaning the 0th element of the array is tier 1.",
          "params": {
            "_tokenId": "The ID of the token to get the tier number of. "
          },
          "returns": {
            "_0": "The tier number of the specified token ID."
          }
        },
        "tierOfTokenId(address,uint256)": {
          "params": {
            "_nft": "The NFT to get a tier within.",
            "_tokenId": "The ID of token to return the tier of. "
          },
          "returns": {
            "_0": "The tier."
          }
        },
        "tierVotingUnitsOf(address,address,uint256)": {
          "params": {
            "_account": "The account to get voting units for.",
            "_nft": "The NFT to get voting units within.",
            "_tierId": "The ID of the tier to get voting units for."
          },
          "returns": {
            "_0": "The voting units for the account."
          }
        },
        "tiers(address,uint256,uint256)": {
          "params": {
            "_nft": "The NFT contract to get tiers for.",
            "_size": "The number of tiers to include.",
            "_startingId": "The start index of the array of tiers sorted by contribution floor. Send 0 to start at the beginning."
          },
          "returns": {
            "_tiers": "All the tiers."
          }
        },
        "totalRedemptionWeight(address)": {
          "params": {
            "_nft": "The NFT for which the redemption weight is being calculated."
          },
          "returns": {
            "weight": "The total weight."
          }
        },
        "totalSupply(address)": {
          "params": {
            "_nft": "The NFT to get a total supply of."
          },
          "returns": {
            "supply": "The total number of NFTs between all tiers."
          }
        },
        "votingUnitsOf(address,address)": {
          "params": {
            "_account": "The account to get voting units for.",
            "_nft": "The NFT to get voting units within."
          },
          "returns": {
            "units": "The voting units for the account."
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "balanceOf(address,address)": {
          "notice": " The total number of tokens owned by the given owner. "
        },
        "baseUriOf(address)": {
          "notice": "The common base for the tokenUri's _nft The NFT for which the base URI applies."
        },
        "cleanTiers(address)": {
          "notice": "Removes removed tiers from sequencing."
        },
        "contractUriOf(address)": {
          "notice": "Contract metadata uri. _nft The NFT for which the contract URI resolver applies."
        },
        "defaultReservedTokenBeneficiaryOf(address)": {
          "notice": "The beneficiary of reserved tokens when the tier doesn't specify a beneficiary. _nft The NFT contract to which the reserved token beneficiary applies."
        },
        "encodedIPFSUriOf(address,uint256)": {
          "notice": "When using this contract to manage token uri's, those are stored as 32bytes, based on IPFS hashes stripped down. _nft The NFT contract to which the encoded upfs uri belongs. _tierId the ID of the tier"
        },
        "encodedTierIPFSUriOf(address,uint256)": {
          "notice": "Resolves the encoded tier IPFS URI of the tier for the given token."
        },
        "firstOwnerOf(address,uint256)": {
          "notice": "The first owner of each token ID, stored on first transfer out. _nft The NFT contract to which the token belongs. _tokenId The ID of the token to get the stored first owner of."
        },
        "isTierRemoved(address,uint256)": {
          "notice": "For each tier ID, a flag indicating if the tier has been removed.  _nft The NFT contract to which the tier data belong. _tierId The ID of the tier to check."
        },
        "lockReservedTokenChangesFor(address)": {
          "notice": "A flag indicating if reserved tokens can change over time by adding new tiers with a reserved rate. _nft The NFT for which the flag applies."
        },
        "lockVotingUnitChangesFor(address)": {
          "notice": "A flag indicating if voting unit expectations can change over time by adding new tiers with voting units. _nft The NFT for which the flag applies."
        },
        "maxTierId(address)": {
          "notice": "The biggest tier ID used.  _nft The NFT contract to get the number of tiers."
        },
        "numberOfReservedTokensOutstandingFor(address,uint256)": {
          "notice": "The number of reserved tokens that can currently be minted within the tier. "
        },
        "numberOfReservesMintedFor(address,uint256)": {
          "notice": " The number of reserved tokens that have been minted for each tier.  _nft The NFT contract to which the reserve data belong. _tierId The ID of the tier to get a minted reserved token count for."
        },
        "recordAddTiers((uint256,uint256,uint256,uint256,uint256,address,bytes32,bool)[])": {
          "notice": "Adds tiers. "
        },
        "recordLockReservedTokenChanges(bool)": {
          "notice": "Sets a flag indicating if reserved tokens can change over time by adding new tiers with a reserved rate. "
        },
        "recordLockVotingUnitChanges(bool)": {
          "notice": "Sets a flag indicating if voting unit expectations can change over time by adding new tiers with voting units."
        },
        "recordMint(uint256,uint16[])": {
          "notice": "Mints a token in all provided tiers."
        },
        "recordMintBestAvailableTier(uint256)": {
          "notice": "Mints a token in the best available tier."
        },
        "recordMintReservesFor(uint256,uint256)": {
          "notice": "Mint a token within the tier for the provided value."
        },
        "recordRemoveTierIds(uint256[])": {
          "notice": "Remove tiers. "
        },
        "recordSetBaseUri(string)": {
          "notice": "Sets the base URI. "
        },
        "recordSetContractUri(string)": {
          "notice": "Sets the contract URI. "
        },
        "recordSetDefaultReservedTokenBeneficiary(address)": {
          "notice": "Sets the reserved token beneficiary."
        },
        "recordSetFirstOwnerOf(uint256,address)": {
          "notice": "Sets the first owner of a token."
        },
        "recordSetTokenUriResolver(address)": {
          "notice": "Sets the token URI resolver. "
        },
        "recordTransferForTier(uint256,address,address)": {
          "notice": "Record a token transfer."
        },
        "redemptionWeightOf(address,uint256[])": {
          "notice": "The cumulative weight the given token IDs have in redemptions compared to the `totalRedemptionWeight`."
        },
        "reservedTokenBeneficiaryOf(address,uint256)": {
          "notice": "The reserved token beneficiary for each tier. "
        },
        "tier(address,uint256)": {
          "notice": "Return the tier for the specified ID. "
        },
        "tierBalanceOf(address,address,uint256)": {
          "notice": "Each account's balance within a specific tier. _nft The NFT contract to which the tier balances belong. _owner The address to get a balance for.  _tierId The ID of the tier to get a balance within."
        },
        "tierIdOfToken(uint256)": {
          "notice": "The tier number of the provided token ID. "
        },
        "tierOfTokenId(address,uint256)": {
          "notice": "Return the tier for the specified token ID. "
        },
        "tierVotingUnitsOf(address,address,uint256)": {
          "notice": "The voting units for an account from its NFTs across all tiers. NFTs have a tier-specific preset number of voting units. "
        },
        "tiers(address,uint256,uint256)": {
          "notice": "Gets an array of all the active tiers. "
        },
        "tokenUriResolverOf(address)": {
          "notice": "Custom token URI resolver, superceeds base URI. _nft The NFT for which the token URI resolver applies."
        },
        "totalRedemptionWeight(address)": {
          "notice": "The cumulative weight that all token IDs have in redemptions."
        },
        "totalSupply(address)": {
          "notice": " The total supply of issued NFTs from all tiers."
        },
        "votingUnitsOf(address,address)": {
          "notice": "The voting units for an account from its NFTs across all tiers. NFTs have a tier-specific preset number of voting units. "
        }
      },
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "contracts/forge-test/NFTReward_Unit.t.sol": "ForTest_JBTiered721DelegateStore"
    },
    "evmVersion": "berlin",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@jbx-protocol/=node_modules/@jbx-protocol/",
      ":@openzeppelin/=node_modules/@openzeppelin/",
      ":@paulrberg/=node_modules/@paulrberg/",
      ":ds-test/=lib/forge-std/lib/ds-test/src/",
      ":forge-std/=lib/forge-std/src/",
      ":prb-math/=node_modules/prb-math/"
    ]
  },
  "sources": {
    "contracts/JBTiered721Delegate.sol": {
      "keccak256": "0x4b39d44231b05fa0bd5511a340ae006086274222528b4450a91a0190d56b3718",
      "license": "MIT",
      "urls": [
        "bzz-raw://d353c02bfc1cd4281ce160c2cbefcec62158cad2098431b82c3b2bff42c83334",
        "dweb:/ipfs/QmdJm2jb2cmr5yjGQiEJXmy2jW2AwoqUJpgtkF418rSbit"
      ]
    },
    "contracts/JBTiered721DelegateStore.sol": {
      "keccak256": "0x92d02440efd4eb735bbb64a851d905453704ff4315471087bd4ca36fa0fb75a6",
      "license": "MIT",
      "urls": [
        "bzz-raw://e1bbd7433268567db7c08fc2d6a182ac7e24381b6776473ea4918abbbe8c990b",
        "dweb:/ipfs/QmfNbTndrGigiMaPyyYhnra2MpPHP742kZsGr6HPA8v5vY"
      ]
    },
    "contracts/abstract/ERC721.sol": {
      "keccak256": "0x34203459b830706fe252f39093665444b0fd46cd51acc683f779cd1300c2e650",
      "license": "MIT",
      "urls": [
        "bzz-raw://495a0e7d336f78ade8fd0ee7861c45e0a6b55b8f30992529d3783b571e83eabe",
        "dweb:/ipfs/QmXTZTor58btbJT7haQBzNL7aW5f2qLgxeswpRXjQ26Mmq"
      ]
    },
    "contracts/abstract/JB721Delegate.sol": {
      "keccak256": "0x73ab001c31c45d66aa05403683058750e2e2d73f5d75e8f9da52fde321c7bef3",
      "license": "MIT",
      "urls": [
        "bzz-raw://b755a6c7d05bf3eafe7ad759e8ecc95d6a43eb5e07e53a0fad3dce41d05dc0aa",
        "dweb:/ipfs/QmSkwARq5MFrJUouoxRCMzchr6i2aefXNRm79BhbA3es8Z"
      ]
    },
    "contracts/abstract/Votes.sol": {
      "keccak256": "0xe11b2ce9aa853e6cc5e2ea4935ec7b08b6ec2396c69a2f48665468bf38a56c7c",
      "license": "MIT",
      "urls": [
        "bzz-raw://f9fa85127e9056e24d64317c73dba642631fbef048ab129952afc25eb02e7462",
        "dweb:/ipfs/QmWehKcxNZhqypZgTGj7EzUHB6q3m6cydQNX3wvBtbjy9R"
      ]
    },
    "contracts/forge-test/NFTReward_Unit.t.sol": {
      "keccak256": "0x30c132e6c23e0b7d107e8258d3b542225e82aeb4e700dff571e14c47c40fce5d",
      "urls": [
        "bzz-raw://5f7c644d8874e8bcb1430518a99adf4987a4e8e19ed61a1e94be8c1669b67bba",
        "dweb:/ipfs/QmU3uPLbNJJS8mhxUgBc4oAnhXZYA7ebfn9REYuf56qo12"
      ]
    },
    "contracts/forge-test/utils/AccessJBLib.sol": {
      "keccak256": "0x8a257792ecb7987e158d71f0502f1403c4d8f3d5c0c39e08b7763ee1b688bb22",
      "license": "MIT",
      "urls": [
        "bzz-raw://4534a5c4aa84cfb96cbfc49bc60b09b0490ac468699839c2ae5a8c7e408cada7",
        "dweb:/ipfs/QmTsXZJeMqnuUuKgKHRiRb6XHoYLdEsRE16sLVBwLiapwR"
      ]
    },
    "contracts/interfaces/IJB721Delegate.sol": {
      "keccak256": "0x4b12cda6a5bf76033185e3d8e071bdebb61986d831a7d64acb6db04a249aa6db",
      "license": "MIT",
      "urls": [
        "bzz-raw://31c222a2941eeb27627ebb951c3fcf2684227bcfa2bcd8d84300e96b0a2bd1c2",
        "dweb:/ipfs/QmVwtRJRbbzNXF9PsSPPyzQiKkJfiqStSYNANapvBKTeeX"
      ]
    },
    "contracts/interfaces/IJBTiered721Delegate.sol": {
      "keccak256": "0xfdc53c66cbc879a046be0c10e55495a03b175aa15b911bbcf4fb936c7a7a326c",
      "license": "MIT",
      "urls": [
        "bzz-raw://7229327dec6386ebe6710dd266aead9418307874f325872af778bc0b83b5ce11",
        "dweb:/ipfs/QmZHhnFMRbScT5zBQVxYMJY45QgxAeugaKbEpkJeboMURa"
      ]
    },
    "contracts/interfaces/IJBTiered721DelegateStore.sol": {
      "keccak256": "0x7e46ef52d8a284117ff8072c1ce86b230b85f895ee5b1cb580589c0080794e64",
      "license": "MIT",
      "urls": [
        "bzz-raw://d4153b1a6d30b74ee194081c9a30294474778f085ca2313f156a5490ab131e66",
        "dweb:/ipfs/QmTKqpJxqnUDWk6HJFMfsAXynNCbpJxnCUUpyiBf9CL5h2"
      ]
    },
    "contracts/libraries/JBIpfsDecoder.sol": {
      "keccak256": "0x985a9dda542f303177224ab50d2c50bba95dd446ea55e3586bbc611af98d4a10",
      "license": "MIT",
      "urls": [
        "bzz-raw://8b03618847db8a1897cee6ceb298dcf89f0e34896d0982195e83b6f5d171d89f",
        "dweb:/ipfs/QmePeSJJ1yo5Sjz4i3F3nRVrPye2rUfLwTZtzu4wTjV2hy"
      ]
    },
    "contracts/structs/JB721Tier.sol": {
      "keccak256": "0x762e3d7e88dafc55d12c50bfa22823694439fbf8e61f801dc4cff8612153b906",
      "license": "MIT",
      "urls": [
        "bzz-raw://bcd6e04d755df0c675ed512ca15b69723fc5a0416bbd324162ac20254f074c53",
        "dweb:/ipfs/Qmc9uj1S2fJTQA5h82K2abrhskSx1ZwaRkHVYxzuZQxsf6"
      ]
    },
    "contracts/structs/JB721TierParams.sol": {
      "keccak256": "0x76832dcf73a1925d1f7c67f9a2156279fbaeeb80f75dca08ad10eac92423eb55",
      "license": "MIT",
      "urls": [
        "bzz-raw://afec181e38f927561eb32ff5a1098424162fb7e868ae57cefa599884c0cfcf6a",
        "dweb:/ipfs/QmUz1R1K1h55Rt4qDCoW5Nuromo6YiECvKgQERncKdNCbs"
      ]
    },
    "contracts/structs/JBStored721Tier.sol": {
      "keccak256": "0xcacf63fc4c4b4c6e5959cc4247b3e1cbba0a2c4d080ce95879d210d10ca7698c",
      "license": "MIT",
      "urls": [
        "bzz-raw://84bb1d365e9129ec249317c498244ff0870a355d2eb2099f9476be0a3a77fa61",
        "dweb:/ipfs/QmUapNiAuWz8zr4WUhFKsxiDMbUFuRbGbKLMDhstDrJvtf"
      ]
    },
    "lib/forge-std/lib/ds-test/src/test.sol": {
      "keccak256": "0xb39cd1d5220cb474947b131e15a4538334b7e886af244b440ae5c9c6bba96a54",
      "license": "GPL-3.0-or-later",
      "urls": [
        "bzz-raw://3101520221449ac0070bda3881311a71d9aa87e5210765e875246922cb5cb5f5",
        "dweb:/ipfs/Qmbg6kAHNoG7ox9N9Xqd9Ere2H2XixMFWFqvyPwFCzB3Gr"
      ]
    },
    "lib/forge-std/src/Script.sol": {
      "keccak256": "0x4424dbcb8f5b741475445726f87408fcd89951fad973bec2ca442ee157f910e7",
      "license": "MIT",
      "urls": [
        "bzz-raw://5b0b9f6dfb69245d8f888558ae82bf1d2cdeace46201444fe4b2e6a5283f944a",
        "dweb:/ipfs/QmWFSKeFEZngNcwNn7A84EF7pASo5qe6r5oK24r9Kwca7Z"
      ]
    },
    "lib/forge-std/src/Test.sol": {
      "keccak256": "0x5d84dd1e27d9127431d6f9aaeb681227235f2b0285545384d1dc236cbcab1364",
      "license": "MIT",
      "urls": [
        "bzz-raw://6fe33b19854be51975ae89d4f4d3074a8b4bbd3c0e4dc5befe84d165f7462b55",
        "dweb:/ipfs/Qma45Q6fvwpmke2rdPdZapNqjXv17ReoT4xp4Tnj1JdBd7"
      ]
    },
    "lib/forge-std/src/Vm.sol": {
      "keccak256": "0x63fc2487cf3a6650d933e18bcb61766f15f74c327192381806ea00f8f6446f66",
      "license": "MIT",
      "urls": [
        "bzz-raw://aad99f7b2ed3b11ff6c17b84b4196c562898640a80cabc2c28c87c116099a00f",
        "dweb:/ipfs/QmQNNbxHabRycegyXwJWBDutrdcScAP2SU5zEvorWEaFpx"
      ]
    },
    "lib/forge-std/src/console.sol": {
      "keccak256": "0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba",
      "license": "MIT",
      "urls": [
        "bzz-raw://91ccea707361e48b9b7a161fe81f496b9932bc471e9c4e4e1e9c283f2453cc70",
        "dweb:/ipfs/QmcB66sZhQ6Kz7MUHcLE78YXRUZxoZnnxZjN6yATsbB2ec"
      ]
    },
    "lib/forge-std/src/console2.sol": {
      "keccak256": "0xbeb823fcdb356244a83aaccdf828ad019ecc1ffaa3dff18e624fc6d5714ea671",
      "license": "MIT",
      "urls": [
        "bzz-raw://4cbe9400340e5f9ec55e2aff3bad1c15fa3afbbe37e80800e6f3fed2ad26854f",
        "dweb:/ipfs/QmdJBABsuXkvWxVzEyGXsTE3vyfBPXDdw5xvvtUz3JeoYW"
      ]
    },
    "node_modules/@jbx-protocol/contracts-v2/contracts/enums/JBBallotState.sol": {
      "keccak256": "0xadf07fd49f7e0947006fa1921bc7fd8fb532e8fecf3b9266721a8b7e43907461",
      "license": "MIT",
      "urls": [
        "bzz-raw://7d4dd83fa3b7f679c9083eb172eb869a62dacf06eb5875dac7418fe3e5ceab1d",
        "dweb:/ipfs/QmTjNHiqPw6k8xKxExt4hL4xvM3NpFkab3CzbfyTMPXuRD"
      ]
    },
    "node_modules/@jbx-protocol/contracts-v2/contracts/interfaces/IJBDirectory.sol": {
      "keccak256": "0x9e7f0d3590b3ddc3b667fcdacaa53b627e4d2b3a912360597fb0ffa413518167",
      "license": "MIT",
      "urls": [
        "bzz-raw://7465d2352978a69eba9c4af7a88c54bf14476a1e76d14807f8722343b266b7fb",
        "dweb:/ipfs/QmdsHrAVKtzESXe48953Z9MXurQkWa2rGnhKr2xzG5jtV4"
      ]
    },
    "node_modules/@jbx-protocol/contracts-v2/contracts/interfaces/IJBFundingCycleBallot.sol": {
      "keccak256": "0xdc8c8bed613f5759c958b7b0d646032b4337a349a8ecea5ffeb167623f2f29f5",
      "license": "MIT",
      "urls": [
        "bzz-raw://e8d33d7214467f8d580781e24a87ffcfc98df6131dca0c0762ee4d2cedaba76d",
        "dweb:/ipfs/QmTkdtenb47dwcZ76iHThKoyN8gaBCAuW4PZDgNVL8W7Uo"
      ]
    },
    "node_modules/@jbx-protocol/contracts-v2/contracts/interfaces/IJBFundingCycleDataSource.sol": {
      "keccak256": "0x8fe4fdc2cd71cd0b7202bddb7078f16c8eea746c8481ee9b3b06a0e01e8e7d6b",
      "license": "MIT",
      "urls": [
        "bzz-raw://f08117bf36e3b2ea9349c49d2ed8961bba73566d162e779a052d9fa0db2a3c9e",
        "dweb:/ipfs/Qme6w3qHHvmYYEo2v8ez9fNFWTThSuiFVJ2rLYwqNhhtc6"
      ]
    },
    "node_modules/@jbx-protocol/contracts-v2/contracts/interfaces/IJBFundingCycleStore.sol": {
      "keccak256": "0xf75791cd5b71bc6773cf56c92501e3f255a406eaedea781cb57cea2fa1e4ef20",
      "license": "MIT",
      "urls": [
        "bzz-raw://697e21258b99ac2c4a2b73bcb8c8a47400737ecf5d3dfa6ca5a7b6f7d6be9c57",
        "dweb:/ipfs/Qmcdg3mEvgbtBnWhjZFubqH8sZU791jtXrWWpohKzN9tkG"
      ]
    },
    "node_modules/@jbx-protocol/contracts-v2/contracts/interfaces/IJBPayDelegate.sol": {
      "keccak256": "0xf7a9ef2df665e1c85a461fadb3cd54f6270c181eac96064005bde19e54d0ffa9",
      "license": "MIT",
      "urls": [
        "bzz-raw://521eafc73d727317a65c8a0a27522de68a62988d005b632dac5cff96983ce892",
        "dweb:/ipfs/QmesPTKhG1T3X6H3QZx4JeYL17ebfahMoajPpAxrHLZdrr"
      ]
    },
    "node_modules/@jbx-protocol/contracts-v2/contracts/interfaces/IJBPaymentTerminal.sol": {
      "keccak256": "0xf50279115f05568c12c254eb2c078b81a0c761f8cc985220e30ec15679118caa",
      "license": "MIT",
      "urls": [
        "bzz-raw://48d3576fd54ae9b9c27338cba0ad91aec18606c55d32a85aeddf1b599834a6cb",
        "dweb:/ipfs/QmUeqF8TRpzYC1MRNQXCWzVFvTQ7iBqfQQHpSQF7LbstFE"
      ]
    },
    "node_modules/@jbx-protocol/contracts-v2/contracts/interfaces/IJBProjects.sol": {
      "keccak256": "0x602bad7e8cce6e9d53fe5e3532c5d4428d02206f8df48b246aac7ee8a6dcc98d",
      "license": "MIT",
      "urls": [
        "bzz-raw://e8b66a1813167e248944b75bcd0af559284e4a2482e9e9ade3c6e8b1fd59eb6e",
        "dweb:/ipfs/QmaNer7KD1EMensiJFABJ31ednVRnZcV3wfcx6FPFajoM9"
      ]
    },
    "node_modules/@jbx-protocol/contracts-v2/contracts/interfaces/IJBRedemptionDelegate.sol": {
      "keccak256": "0xfc91761a568e60e1a1429ac11b0d1b57c627ef59f4011b17df4f9f540b7dd60d",
      "license": "MIT",
      "urls": [
        "bzz-raw://acf3264c04b881d7f59608c9f4e5c2e7333c2beb4c4f4468d6626c74aaa5e535",
        "dweb:/ipfs/QmPv6rH6gPHSpbRCGuMnZyGjV5iSkfbKjJsmD5Cxegn5CK"
      ]
    },
    "node_modules/@jbx-protocol/contracts-v2/contracts/interfaces/IJBTokenUriResolver.sol": {
      "keccak256": "0xa64ece706d7ce399095f403b08383391c089da4995b5ee000b278d93d242a475",
      "license": "MIT",
      "urls": [
        "bzz-raw://900eeb480ed168ada8a738381bb1ea9c92a007e7000a1f2e5d7da02b3010a19b",
        "dweb:/ipfs/QmfKS6Mi6wGsT8gP3AETYKaXCiwFe9dzzFTEEkaFF7xoWg"
      ]
    },
    "node_modules/@jbx-protocol/contracts-v2/contracts/libraries/JBConstants.sol": {
      "keccak256": "0x31517dfd8accf961f247cefd72bf8a76c20747cd8ed65cedf817dd7aa9a0082f",
      "license": "MIT",
      "urls": [
        "bzz-raw://29186e669b1130e1f35347a51fb40ced9b7d42d504f2133b608f4ea49aae211d",
        "dweb:/ipfs/QmduXpR7j1UroX94MCNA7zNBqAC3v18j2FMwki7T8rBEFv"
      ]
    },
    "node_modules/@jbx-protocol/contracts-v2/contracts/libraries/JBCurrencies.sol": {
      "keccak256": "0x3077e365b09d45e3a82d6710bfda7323a0366c3cafc318ea9dc442a1a93036d7",
      "license": "MIT",
      "urls": [
        "bzz-raw://b3513cb05d97dfb8d675c30055d2ab21909294a946eeffe1678ba49a7f0d8573",
        "dweb:/ipfs/QmerkmEBiE2CRoeGE5MJtjXLjHw6XgD5otCD3Cd5niJ6WX"
      ]
    },
    "node_modules/@jbx-protocol/contracts-v2/contracts/libraries/JBTokens.sol": {
      "keccak256": "0x8531a1a36ca119b805a011f230ee9bdeb1036c82d8fd69fc5d4503da6daace51",
      "license": "MIT",
      "urls": [
        "bzz-raw://61afbb4de4a7c32102fb2d57db24fc2026da2268b53945d5b5158357be28f9e3",
        "dweb:/ipfs/QmNT5XuA46rKh7eV6hMdkpFFqitJUR5a993HEiVUKVoBiQ"
      ]
    },
    "node_modules/@jbx-protocol/contracts-v2/contracts/structs/JBDidPayData.sol": {
      "keccak256": "0x5466643df68a7bb1f88b781b7ac74379a1428d700edb1a22cd211c1fb8af458c",
      "license": "MIT",
      "urls": [
        "bzz-raw://ddd2e26dbf3d79cee9ef14bb9671a18471f6c5ee0e8252dda24d17e0919882d8",
        "dweb:/ipfs/QmYZknzBV5jzJXNJE4vAkxqBXfpi7WBS4XUqXPTGzEfftd"
      ]
    },
    "node_modules/@jbx-protocol/contracts-v2/contracts/structs/JBDidRedeemData.sol": {
      "keccak256": "0x52e35ebfda7cf16c90d920c63e450663c0d2b3395554b313e742d8fe74dc187f",
      "license": "MIT",
      "urls": [
        "bzz-raw://5fb8b3da0c5dab17d5263562de358af381aa6114363a97953ef5a02432f34fec",
        "dweb:/ipfs/QmSnnQwrGzXMvqjRsezL3rTgsvFpnm8QX9TjyCNY7cz3x3"
      ]
    },
    "node_modules/@jbx-protocol/contracts-v2/contracts/structs/JBFundingCycle.sol": {
      "keccak256": "0x7e1ee378705e677298b955bd82b7c79b962e1c2e20f840eb8c491aba595e4905",
      "license": "MIT",
      "urls": [
        "bzz-raw://4d2361ccc893ff87555ba225a5518e7c54d26faf5f51111d3fdd6b9bb9a2a608",
        "dweb:/ipfs/QmStFS5zKEbbbLZwBiNDBD7oqSKFzjZuYGReZrsnkzpuGR"
      ]
    },
    "node_modules/@jbx-protocol/contracts-v2/contracts/structs/JBFundingCycleData.sol": {
      "keccak256": "0xfc1c73d1b01782bbdfdd73d5d25f075e6c33dd37414638b63664063a0d1692cc",
      "license": "MIT",
      "urls": [
        "bzz-raw://751db5a5a4c7bb7b836a842688c8590c4557c660725df68e87c2935ed7fc995c",
        "dweb:/ipfs/QmPnwDBtcUhgs3L9gnEcdFXpJEdu8QcTMUFMQfLcwU53YZ"
      ]
    },
    "node_modules/@jbx-protocol/contracts-v2/contracts/structs/JBPayParamsData.sol": {
      "keccak256": "0x1e36a8a71ed2274fd31b0475e69943acc6a2091397a0d6c4fa99db05d9aaa0fd",
      "license": "MIT",
      "urls": [
        "bzz-raw://217ed226bf196ab19dd8e9fb340c1553b9f3a749ba450f9b6a36b42cb277e8a3",
        "dweb:/ipfs/Qmb89jN5p3wEVCRx2BaUizHyDZJcihPoPKCNF3Ww3TX9by"
      ]
    },
    "node_modules/@jbx-protocol/contracts-v2/contracts/structs/JBProjectMetadata.sol": {
      "keccak256": "0x5ea56d46d07944aacfe540ee9290f10a70d77b537650a0b28975e2e88fa5b9a4",
      "license": "MIT",
      "urls": [
        "bzz-raw://afdac58b0c0decc7576d5581757230f0d60c2415bb7a552e507e2833de7df9fa",
        "dweb:/ipfs/QmcsdVf8MHP5J13feRQzPvUZZGyohYmqeTWZuvvLsi2Czw"
      ]
    },
    "node_modules/@jbx-protocol/contracts-v2/contracts/structs/JBRedeemParamsData.sol": {
      "keccak256": "0xefe0290796bd282e478bdcfc1eb91c1bb02a3c910edd89b67db9c7d7f566c069",
      "license": "MIT",
      "urls": [
        "bzz-raw://dacda7ca85d6b4b832c40eae79e2362475d7111d397aaff3fb31c5811a9854a7",
        "dweb:/ipfs/QmQ2TymkG7wacEuGMCC2Ep2HWXRgAexhMt75YJbe9z19Mt"
      ]
    },
    "node_modules/@jbx-protocol/contracts-v2/contracts/structs/JBTokenAmount.sol": {
      "keccak256": "0xc606ed3c46a59e2e037897d2d749867919756d01f8e75a495d2dd4e03c3535fc",
      "license": "MIT",
      "urls": [
        "bzz-raw://4d68ccb6e9c7cf11f214d3812a0cc8de9918b601c62f39950172375d4be415f9",
        "dweb:/ipfs/QmRKhczPkxzVCKQ657EuLBftF5J2VVZKQknjWUa9sJ48rn"
      ]
    },
    "node_modules/@openzeppelin/contracts/access/Ownable.sol": {
      "keccak256": "0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673",
      "license": "MIT",
      "urls": [
        "bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2",
        "dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y"
      ]
    },
    "node_modules/@openzeppelin/contracts/governance/utils/IVotes.sol": {
      "keccak256": "0xf5324a55ee9c0b4a840ea57c055ac9d046f88986ceef567e1cf68113e46a79c0",
      "license": "MIT",
      "urls": [
        "bzz-raw://f41fe2bddc33c17ccccfc25379b1869354e9ee62d8b28d2acc95229eeba37a86",
        "dweb:/ipfs/Qmb6SF2XL2uSvH6k5JSjtx4Xoqz41ACkhdAhtbW1Yh3RiY"
      ]
    },
    "node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "keccak256": "0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f",
      "license": "MIT",
      "urls": [
        "bzz-raw://20a97f891d06f0fe91560ea1a142aaa26fdd22bed1b51606b7d48f670deeb50f",
        "dweb:/ipfs/QmTbCtZKChpaX5H2iRiTDMcSz29GSLCpTCDgJpcMR4wg8x"
      ]
    },
    "node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "keccak256": "0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da",
      "license": "MIT",
      "urls": [
        "bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708",
        "dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV"
      ]
    },
    "node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "keccak256": "0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9",
      "license": "MIT",
      "urls": [
        "bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146",
        "dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf"
      ]
    },
    "node_modules/@openzeppelin/contracts/utils/Address.sol": {
      "keccak256": "0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10",
      "license": "MIT",
      "urls": [
        "bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487",
        "dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG"
      ]
    },
    "node_modules/@openzeppelin/contracts/utils/Checkpoints.sol": {
      "keccak256": "0x2e109f03a05809288a1478d4d9fcd0804229207e18d1164ce0597fb0958a159c",
      "license": "MIT",
      "urls": [
        "bzz-raw://d9495415607fcbd1c940e726f396c46892af8c8772247c002650deacaf5199fb",
        "dweb:/ipfs/QmagLfEk1NCaJEMVDP3ix9BmXy6mccVUMfKAbWQFtjkjvJ"
      ]
    },
    "node_modules/@openzeppelin/contracts/utils/Context.sol": {
      "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
      "license": "MIT",
      "urls": [
        "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
        "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
      ]
    },
    "node_modules/@openzeppelin/contracts/utils/Counters.sol": {
      "keccak256": "0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1",
      "license": "MIT",
      "urls": [
        "bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee",
        "dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu"
      ]
    },
    "node_modules/@openzeppelin/contracts/utils/Strings.sol": {
      "keccak256": "0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3",
      "license": "MIT",
      "urls": [
        "bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638",
        "dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9"
      ]
    },
    "node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "keccak256": "0x84ac2d2f343df1e683da7a12bbcf70db542a7a7a0cea90a5d70fcb5e5d035481",
      "license": "MIT",
      "urls": [
        "bzz-raw://73ae8e0c6f975052973265113d762629002ce33987b1933c2a378667e2816f2f",
        "dweb:/ipfs/QmQAootkVfoe4PLaYbT4Xob2dJRm3bZfbCffEHRbCYXNPF"
      ]
    },
    "node_modules/@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "keccak256": "0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7",
      "license": "MIT",
      "urls": [
        "bzz-raw://8bc00ab7f133cdaafd212a5cc6a16c8d37319721105d130c8e5af0c4e8f170ba",
        "dweb:/ipfs/QmVmf6LVMfFiEkvKYLzSv3bGHzymEW93AcUuFrNUdY3NtT"
      ]
    },
    "node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
      "license": "MIT",
      "urls": [
        "bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
        "dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
      ]
    },
    "node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
      "license": "MIT",
      "urls": [
        "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
        "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
      ]
    },
    "node_modules/@openzeppelin/contracts/utils/math/Math.sol": {
      "keccak256": "0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0",
      "license": "MIT",
      "urls": [
        "bzz-raw://b600b852e0597aa69989cc263111f02097e2827edc1bdc70306303e3af5e9929",
        "dweb:/ipfs/QmU4WfM28A1nDqghuuGeFmN3CnVrk6opWtiF65K4vhFPeC"
      ]
    },
    "node_modules/@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "keccak256": "0x02686c31ccb9ee77a299fa5f47327af5271f251a707a0e24f321957166ff0434",
      "license": "MIT",
      "urls": [
        "bzz-raw://cb562d8ae1da31249ca0d8553df9f89ef4c3c110a018c4449dde68ae30e51ec1",
        "dweb:/ipfs/QmUwxjtTUYB89ymeV46TZPmTsGnYrKNcgTHk7MQA1MG3hj"
      ]
    },
    "node_modules/@paulrberg/contracts/math/PRBMath.sol": {
      "keccak256": "0x42821345981bc0434a90ba2268a2f5278dfe9e38166981d72fc7f3b776a29495",
      "license": "Unlicense",
      "urls": [
        "bzz-raw://92f28eea1e22d4e7998617483eef42d89eb97b364414cf41041c86aa633d3b47",
        "dweb:/ipfs/QmT5entVZFjbb3ZGZZvNAGqtwerCgwjCfN1Qmvf8jKPBXj"
      ]
    },
    "node_modules/prb-math/contracts/PRBMath.sol": {
      "keccak256": "0xed164c95012964f5e125b5d2b2d00471a4bdee4def618cd1fcf341d196011b61",
      "license": "Unlicense",
      "urls": [
        "bzz-raw://3ba3ad78675323279adfc09038eaa14f4cde3f3173e5d2d60b9c30bf7099aa7b",
        "dweb:/ipfs/QmV56KGJZQG681hwd7JQDv3KjAa9JSGF88ShGx8YBCuvcR"
      ]
    }
  },
  "version": 1
}